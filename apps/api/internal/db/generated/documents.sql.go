// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDocument = `-- name: AddDocument :one
INSERT INTO documents(
  user_id,
  source,
  content,
  type
  ) values ($1, $2, $3, $4)
RETURNING id, user_id, source, content, type
`

type AddDocumentParams struct {
	UserID  pgtype.Int4
	Source  string
	Content pgtype.Text
	Type    string
}

func (q *Queries) AddDocument(ctx context.Context, arg AddDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, addDocument,
		arg.UserID,
		arg.Source,
		arg.Content,
		arg.Type,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Source,
		&i.Content,
		&i.Type,
	)
	return i, err
}

const getDocument = `-- name: GetDocument :one
SELECT documents.id, documents.user_id, documents.source, documents.content, documents.type, users.username
FROM documents JOIN users on users.id = documents.user_id
WHERE documents.id = $1
`

type GetDocumentRow struct {
	ID       int32
	UserID   pgtype.Int4
	Source   string
	Content  pgtype.Text
	Type     string
	Username string
}

func (q *Queries) GetDocument(ctx context.Context, id int32) (GetDocumentRow, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i GetDocumentRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Source,
		&i.Content,
		&i.Type,
		&i.Username,
	)
	return i, err
}

const updateDocument = `-- name: UpdateDocument :exec
UPDATE documents
SET user_id = $2, source = $3, content = $4, type = $5
where id = $1
`

type UpdateDocumentParams struct {
	ID      int32
	UserID  pgtype.Int4
	Source  string
	Content pgtype.Text
	Type    string
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) error {
	_, err := q.db.Exec(ctx, updateDocument,
		arg.ID,
		arg.UserID,
		arg.Source,
		arg.Content,
		arg.Type,
	)
	return err
}
