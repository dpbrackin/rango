// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: indexes.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndex = `-- name: CreateIndex :one
INSERT INTO indexes(
  id,
  org_id,
  name,
  engine
) VALUES ($1, $2, $3, $4)
  RETURNING id, org_id, name, engine
`

type CreateIndexParams struct {
	ID     pgtype.UUID
	OrgID  pgtype.UUID
	Name   string
	Engine string
}

func (q *Queries) CreateIndex(ctx context.Context, arg CreateIndexParams) (Index, error) {
	row := q.db.QueryRow(ctx, createIndex,
		arg.ID,
		arg.OrgID,
		arg.Name,
		arg.Engine,
	)
	var i Index
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Engine,
	)
	return i, err
}

const getIndex = `-- name: GetIndex :one
SELECT id, org_id, name, engine
FROM indexes
WHERE id = $1
`

func (q *Queries) GetIndex(ctx context.Context, id pgtype.UUID) (Index, error) {
	row := q.db.QueryRow(ctx, getIndex, id)
	var i Index
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Name,
		&i.Engine,
	)
	return i, err
}

const listIndexDocuments = `-- name: ListIndexDocuments :many
SELECT doc.id, doc.user_id, doc.source, doc.content, doc.type
FROM index_documents idxd JOIN documents doc on idxd.document_id = doc.id
WHERE idxd.index_id = $1
ORDER BY $2
LIMIT $3
OFFSET $4
`

type ListIndexDocumentsParams struct {
	IndexID pgtype.UUID
	Column2 interface{}
	Limit   int32
	Offset  int32
}

func (q *Queries) ListIndexDocuments(ctx context.Context, arg ListIndexDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listIndexDocuments,
		arg.IndexID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Source,
			&i.Content,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIndex = `-- name: UpdateIndex :exec
UPDATE indexes
SET name = $1
WHERE id = $2
`

type UpdateIndexParams struct {
	Name string
	ID   pgtype.UUID
}

func (q *Queries) UpdateIndex(ctx context.Context, arg UpdateIndexParams) error {
	_, err := q.db.Exec(ctx, updateIndex, arg.Name, arg.ID)
	return err
}
