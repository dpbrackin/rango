// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organization.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO organization_memberships(user_id, org_id, is_default)
VALUES ($1, $2, $3)
RETURNING id, user_id, org_id, is_default
`

type CreateMembershipParams struct {
	UserID    pgtype.UUID
	OrgID     pgtype.UUID
	IsDefault pgtype.Bool
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (OrganizationMembership, error) {
	row := q.db.QueryRow(ctx, createMembership, arg.UserID, arg.OrgID, arg.IsDefault)
	var i OrganizationMembership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrgID,
		&i.IsDefault,
	)
	return i, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations(id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateOrganizationParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getDefaultUserOrganization = `-- name: GetDefaultUserOrganization :one
SELECT org.id, org.name
FROM organizations org JOIN organization_memberships om ON org.id = om.org_id
WHERE om.user_id = $1 AND is_default = true
`

func (q *Queries) GetDefaultUserOrganization(ctx context.Context, userID pgtype.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getDefaultUserOrganization, userID)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name
FROM organizations
WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id pgtype.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserOrganizations = `-- name: GetUserOrganizations :many
SELECT org.id, org.name
FROM organizations org JOIN organization_memberships om ON org.id = om.org_id
WHERE om.user_id = $1
`

func (q *Queries) GetUserOrganizations(ctx context.Context, userID pgtype.UUID) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getUserOrganizations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembership = `-- name: UpdateMembership :exec
UPDATE organization_memberships
SET is_default = $1
WHERE user_id = $2 and org_id = $3
`

type UpdateMembershipParams struct {
	IsDefault pgtype.Bool
	UserID    pgtype.UUID
	OrgID     pgtype.UUID
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) error {
	_, err := q.db.Exec(ctx, updateMembership, arg.IsDefault, arg.UserID, arg.OrgID)
	return err
}
